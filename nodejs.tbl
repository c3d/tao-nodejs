// *****************************************************************************
// nodejs.tbl                                                      Tao3D project
// *****************************************************************************
//
// File description:
//
//     Definition of the interface between XLR and native code
//     for the NodeJS module.
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2014,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2013, Jérôme Forissier <jerome@taodyne.com>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

#include "nodejs.h"

PREFIX(NodeJS,  tree,  "nodejs",
       PARM(n, text, "The name of the NodeJS subprocess")
       PARM(s, text, "JavaScript source code to execute"),
       return NodeJSFactory::nodejs(context, self, n, s),
       GROUP(pointcloud)
       SYNOPSIS("Start a NodeJS subprocess.")
       DESCRIPTION("Executes the specified JavaScript source in a subprocess."))

PREFIX(NodeJSLoad,  tree,  "nodejs_load",
       PARM(n, text, "The name of the NodeJS subprocess")
       PARM(f, text, "Path to the JavaScript source code to execute"),
       return NodeJSFactory::nodejs_load(context, self, n, f),
       GROUP(pointcloud)
       SYNOPSIS("Start a NodeJS subprocess.")
       DESCRIPTION("Executes the specified JavaScript source file in a subprocess."))

PREFIX(NodeJSDefault,  tree,  "nodejs",
       PARM(s, text, "JavaScript source code to execute"),
       return NodeJSFactory::nodejs(context, self, s),
       GROUP(pointcloud)
       SYNOPSIS("Start a NodeJS subprocess.")
       DESCRIPTION("Executes the specified JavaScript source in a subprocess "
                   "called 'default'."))

PREFIX(NodeJSLoadDefault,  tree,  "nodejs_load",
       PARM(f, text, "Path to the JavaScript source code to execute"),
       return NodeJSFactory::nodejs_load(context, self, f),
       GROUP(pointcloud)
       SYNOPSIS("Start a NodeJS subprocess.")
       DESCRIPTION("Executes the specified JavaScript source file in a subprocess "
                   "called 'default'."))

PREFIX(NodeJSWriteln,  tree,  "nodejs_writeln",
       PARM(n, text, "The name of the NodeJS subprocess")
       PARM(t, text, "The text to send to the standard input channel of the subprocess."),
       return NodeJSFactory::nodejs_writeln(n, t),
       GROUP(pointcloud)
       SYNOPSIS("Send text to a NodeJS subprocess")
       DESCRIPTION("The text sent to the subprocess may be evaluated by the "
                   "JavaScript code to implement remote callbacks."))

PREFIX(NodeJSWritelnDefault,  tree,  "nodejs_writeln",
       PARM(t, text, "The text to send to the standard input channel of the subprocess."),
       return NodeJSFactory::nodejs_writeln(t),
       GROUP(pointcloud)
       SYNOPSIS("Send text to the default NodeJS subprocess"))
